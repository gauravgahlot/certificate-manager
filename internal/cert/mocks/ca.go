// Code generated by MockGen. DO NOT EDIT.
// Source: certificate-manager/internal/cert (interfaces: CertAuthority)
//
// Generated by this command:
//
//	mockgen -destination=internal/cert/mocks/ca.go -package=mocks certificate-manager/internal/cert CertAuthority
//

// Package mocks is a generated GoMock package.
package mocks

import (
	cert "certificate-manager/internal/cert"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCertAuthority is a mock of CertAuthority interface.
type MockCertAuthority struct {
	ctrl     *gomock.Controller
	recorder *MockCertAuthorityMockRecorder
}

// MockCertAuthorityMockRecorder is the mock recorder for MockCertAuthority.
type MockCertAuthorityMockRecorder struct {
	mock *MockCertAuthority
}

// NewMockCertAuthority creates a new mock instance.
func NewMockCertAuthority(ctrl *gomock.Controller) *MockCertAuthority {
	mock := &MockCertAuthority{ctrl: ctrl}
	mock.recorder = &MockCertAuthorityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertAuthority) EXPECT() *MockCertAuthorityMockRecorder {
	return m.recorder
}

// HasCertificateExpired mocks base method.
func (m *MockCertAuthority) HasCertificateExpired(arg0 []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasCertificateExpired", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasCertificateExpired indicates an expected call of HasCertificateExpired.
func (mr *MockCertAuthorityMockRecorder) HasCertificateExpired(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasCertificateExpired", reflect.TypeOf((*MockCertAuthority)(nil).HasCertificateExpired), arg0)
}

// IssueCert mocks base method.
func (m *MockCertAuthority) IssueCert(arg0 cert.Request) ([]byte, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueCert", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IssueCert indicates an expected call of IssueCert.
func (mr *MockCertAuthorityMockRecorder) IssueCert(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueCert", reflect.TypeOf((*MockCertAuthority)(nil).IssueCert), arg0)
}
